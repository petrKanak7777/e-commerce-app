spring:
  datasource:
    url: jdbc:postgresql://${application.config.hostname}:5432/payment
    username: pKanak
    password: pKanak
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: validate #create-drop, create, update, validate
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  flyway:
    baseline-on-migrate: true
    enabled: true
    baseline-description: "init"
    baseline-version: 0
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}
  kafka:
    bootstrap-servers: dockervm:9092
    producer:
      bootstrap-servers: dockervm:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: paymentConfirmation:com.pk.ecommerce.kafka.PaymentNotificationRequest
server:
  port: 8060

application:
  config:
    customer-url: http://${application.config.hostname}:8222/api/v1/customers #In next phase use url from api-gateway! api-gateway-port(8222) - 8090
    payment-url: http://${application.config.hostname}:8222/api/v1/payments #In next phase use url from api-gateway! api-gateway-port(8222) - 8060
    product-url: http://${application.config.hostname}:8222/api/v1/products #In next phase use url from api-gateway! api-gateway-port(8222) - 8050
    kafka:
      payment-topic: payment-topic

logging:
  config: classpath:logback-spring.xml
  level:
    root: INFO # TRACE DEBUG INFO WARN ERROR
    com:
      pk: INFO
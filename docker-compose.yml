services:
  postgres:
    container_name: ms_pg_sql
    image: postgres
    environment:
      POSTGRES_USER: pKanak
      POSTGRES_PASSWORD: pKanak
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - microservices-net
    restart: unless-stopped

  pgadmin:
    container_name: ms_pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - 5050:80
    networks:
      - microservices-net
    restart: unless-stopped

  mongo-express:
    image: mongo-express
    container_name: ms_mongo_express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo-db
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: pKanak
      ME_CONFIG_MONGODB_ADMINPASSWORD: pKanak
      ME_CONFIG_BASICAUTH_PASSWORD: pKanak
      ME_CONFIG_BASICAUTH_USERNAME: pKanak
    depends_on:
      - mongo-db
    networks:
      - microservices-net

  mongo-db:
    image: mongo
    container_name: ms_mongo_db
    ports:
      - 27017:27017
    volumes:
      - mongovol:/data
    environment:
      MONGO_INITDB_ROOT_USERNAME: pKanak
      MONGO_INITDB_ROOT_PASSWORD: pKanak
    networks:
      - microservices-net

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: ms_zookeeper
    ports:
      - "2181:2181"
    networks:
      - microservices-net

  kafka:
    image: wurstmeister/kafka:latest
    container_name: ms_kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS:
        "INTERNAL://kafka:9090,\
         EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS:
        "INTERNAL://kafka:9090,\
         EXTERNAL://dockervm:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:
        "INTERNAL:PLAINTEXT,\
         EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - microservices-net

  mail-dev:
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025

  keycloak:
    container_name: ms_keycloak
    image: quay.io/keycloak/keycloak:24.0.2
    ports:
      - 9099:8080
    environment:
      KEYCLOAK_ADMIN: pKanak
      KEYCLOAK_ADMIN_PASSWORD: pKanak
    networks:
      - microservices-net
    command:
      - "start-dev"

  zipkin:
    container_name: ms_zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net

  config-server:
    container_name: ms_config_server
    image: ms-config-server
    environment:
      _JAVA_OPTIONS: >
#        -Xdebug
#        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    ports:
#      - "5005:5005"
      - "8888:8888"
    networks:
      - microservices-net

  discovery-server:
    container_name: ms_discovery_server
    image: ms-discovery-server
    environment:
      _JAVA_OPTIONS: >
#        -Xdebug
#        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    ports:
#      - "5005:5005"
      - "8761:8761"
    networks:
      - microservices-net
    depends_on:
      - config-server

  gateway:
    container_name: ms_gateway_service
    image: ms-gateway-service
    environment:
      _JAVA_OPTIONS: >
#        -Xdebug
#        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    ports:
#      - "5005:5005"
      - "8222:8222"
    networks:
      - microservices-net
    depends_on:
      - discovery-server

  product:
    container_name: ms_product_service
    image: ms-product-service
    environment:
      _JAVA_OPTIONS: >
#        -Xdebug
#        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    ports:
      - "8050:8050"
#      - "5005:5005"
    networks:
      - microservices-net
    depends_on:
      - gateway

  customer:
    container_name: ms_customer_service
    image: ms-customer-service
    environment:
      _JAVA_OPTIONS: >
#        -Xdebug
#        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    ports:
      - "8090:8090"
#      - "5005:5005"
    networks:
      - microservices-net
    depends_on:
      - gateway

  notification:
    container_name: ms_notification_service
    image: ms-notification-service
    environment:
      _JAVA_OPTIONS: >
#        -Xdebug
#        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    ports:
      - "8040:8040"
#      - "5005:5005"
    networks:
      - microservices-net
    depends_on:
      - gateway

  order:
    container_name: ms_order_service
    image: ms-order-service
    environment:
      _JAVA_OPTIONS: >
#        -Xdebug
#        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    ports:
      - "8070:8070"
#      - "5005:5005"
    networks:
      - microservices-net
    depends_on:
      - gateway

  payment:
    container_name: ms_payment_service
    image: ms-payment-service
    environment:
      _JAVA_OPTIONS: >
#        -Xdebug
#        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    ports:
      - "8060:8060"
#      - "5005:5005"
    networks:
      - microservices-net
    depends_on:
      - gateway

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
    container_name: ms_elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - microservices-net

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.3
    container_name: ms_logstash
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - microservices-net

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.3
    container_name: ms_kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    networks:
      - microservices-net

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: ms_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./resources/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:9.5.2
    container_name: ms_grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./resources/grafana/datasources:/etc/grafana/provisioning/datasources

networks:
  microservices-net:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  mongovol: